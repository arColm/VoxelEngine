2 bytes per voxel - id

bind the vao and set vertex attributes to block attributes respectively


Each chunk is WIDTH * HEIGHT * WIDTH -- stored in a straight array



TODO
 - simple face culling
 --- need some way to access neighbouring chunks

 - instanced rendering

 - change way to store colors...

 - (flat ground/simple) chunk generator
 - generating chunks based on camera location - render distance
 - unloading chunks based on camera location
 ---whenever we enter a new chunk --> iterate through chunks to see which ones are out of bounds 
 --- --> then iterate through bounds to ensure all chunks in bounds are loaded
 - fog to mask chunk loading
 - noise applied to chunk generator

 - clouds (can just be noise!)

 - more block types
 - varying colors for a block type?
 - multiple shaders per block? e.g. water has a unique shader
 --- use uniform buffer object to handle transformation matrices
 --- alternatively just use a different shader for liquids --> new chunk renderer for liquids
 
 - simple light
 - day/night cycle





future optimizations

 - sharing vertices, using EBO ?
 - greedy meshing?
