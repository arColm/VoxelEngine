2 bytes per voxel - id

bind the vao and set vertex attributes to block attributes respectively


Each chunk is WIDTH * HEIGHT * WIDTH -- stored in a straight array



TODO
CHANGE ALL RAW POINTERS TO SMART POINTERS


 - instanced rendering

 - change way to store colors...

 - fog to mask chunk loading
 - noise applied to chunk generator

 - clouds (can just be noise!)

 - more block types
 - varying colors for a block type?
 - multiple shaders per block? e.g. water has a unique shader
 --- use uniform buffer object to handle transformation matrices
 --- alternatively just use a different shader for liquids --> new chunk renderer for liquids
 
 - simple light
 - day/night cycle



 create thread to generate chunk + vertex data [.detach()]
 puts chunk into queue [LOCKED]
 main rendering thread checks queue, pops and then loads any chunks into VAOs, then adds to chunk_map [LOCKED]
 main rendering thread renders all chujnks in chunk_map.

future optimizations

 - sharing vertices, using EBO ?
 - greedy meshing?
